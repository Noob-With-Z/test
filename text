local _wait = task.wait
repeat _wait() until game:IsLoaded()
local _env = getgenv and getgenv() or {}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer

local rs_Monsters = ReplicatedStorage:WaitForChild("MonsterSpawn")
local Modules = ReplicatedStorage:WaitForChild("ModuleScript")
local OtherEvent = ReplicatedStorage:WaitForChild("OtherEvent")
local Monsters = workspace:WaitForChild("Monster")

local MQuestSettings = require(Modules:WaitForChild("Quest_Settings"))
local MSetting = require(Modules:WaitForChild("Setting"))

local NPCs = workspace:WaitForChild("NPCs")
local Raids = workspace:WaitForChild("Raids")
local Location = workspace:WaitForChild("Location")
local Region = workspace:WaitForChild("Region")
local Island = workspace:WaitForChild("Island")

local Quests_Npc = NPCs:WaitForChild("Quests_Npc")
local EnemyLocation = Location:WaitForChild("Enemy_Location")
local QuestLocation = Location:WaitForChild("QuestLocaion")

local Items = Player:WaitForChild("Items")
local QuestFolder = Player:WaitForChild("QuestFolder")
local Ability = Player:WaitForChild("Ability")
local PlayerData = Player:WaitForChild("PlayerData")
local PlayerLevel = PlayerData:WaitForChild("Level")

local sethiddenproperty = sethiddenproperty or (function()end)

local CFrame_Angles = CFrame.Angles
local CFrame_new = CFrame.new
local Vector3_new = Vector3.new

local _huge = math.huge

task.spawn(function()
	if not _env.LoadedHideUsername then
		_env.LoadedHideUsername = true
		local Label = Player.PlayerGui.MainGui.PlayerName

		local function Update()
			local Level = PlayerLevel.Value
			local IsMax = Level >= MSetting.Setting.MaxLevel
			Label.Text = ("%s â€¢ Lv. %i%s"):format("ðŸ¤«", Level, IsMax and " (Max)" or "")
		end

		Label:GetPropertyChangedSignal("Text"):Connect(Update)Update()
	end
end)

local Loaded, Funcs, Folders = {}, {}, {} do
	Loaded.ItemsPrice = {
		Aura = function()
			return Funcs:GetMaterial("Meme Cube") > 0 and Funcs:GetData("Money") >= 10000000 -- 1x Meme Cube, $10.000.000
		end,
		FlashStep = function()
			return Funcs:GetData("Money") >= 100000 -- $100.000
		end,
		Instinct = function()
			return Funcs:GetData("Money") >= 2500000 -- $2.500.000
		end
	}
	Loaded.Shop = {
		{"Weapons", {
			{"Buy Katana", "$5.000 Money", {"Weapon_Seller", "Doge"}},
			{"Buy Hanger", "$25.000 Money", {"Weapon_Seller", "Hanger"}},
			{"Buy Flame Katana", "1x Cheems Cola and $50.000", {"Weapon_Seller", "Cheems"}},
			{"Buy Banana", "1x Cat Food and $350.000", {"Weapon_Seller", "Smiling Cat"}},
			{"Buy Bonk", "5x Money Bags and $1.000.000", {"Weapon_Seller", "Meme Man"}},
			{"Buy Pumpkin", "1x Nugget Man and $3.500.000", {"Weapon_Seller", "Gravestone"}},
			{"Buy Popcat", "10.000 Pops Clicker", {"Weapon_Seller", "Ohio Popcat"}}
		}},
		{"Ability", {
			{"Buy Flash Step", "$100.000 Money", {"Ability_Teacher", "Giga Chad"}},
			{"Buy Instinct", "$2.500.000 Money", {"Ability_Teacher", "Nugget Man"}},
			{"Buy Aura", "1x Meme Cube and $10.000.000", {"Ability_Teacher", "Aura Master"}}
		}},
		{"Fighting Style", {
			{"Buy Combat", "$0 Money", {"FightingStyle_Teacher", "Maxwell"}},
			{"Buy Baller", "10x Balls and $10.000.000", {"FightingStyle_Teacher", "Baller"}}
		}}
	}
	Loaded.WeaponsList = { "Fight", "Power", "Weapon" }
	Loaded.EnemeiesList = {}
	Loaded.EnemiesSpawns = {}
	Loaded.EnemiesQuests = {}
	Loaded.Islands = {}
	Loaded.Quests = {}

	local function RedeemCode(Code)
		return OtherEvent.MainEvents.Code:InvokeServer(Code)
	end

	Funcs.RAllCodes = function(self)
		if Modules:FindFirstChild("CodeList") then
			local List = require(Modules.CodeList)
			for Code, Info in pairs(type(List) == "table" and List or {}) do
				if type(Code) == "string" and type(Info) == "table" and Info.Status then RedeemCode(Code) end
			end
		end
	end

	Funcs.GetPlayerLevel = function(self)
		return PlayerLevel.Value
	end

	Funcs.GetCurrentQuest = function(self)
		for _,Quest in pairs(Loaded.Quests) do
			if Quest.Level <= self:GetPlayerLevel() and not Quest.RaidBoss and not Quest.SpecialQuest then
				return Quest
			end
		end
	end

	Funcs.CheckQuest = function(self)
		for _,v in ipairs(QuestFolder:GetChildren()) do
			if v.Target.Value ~= "None" then
				return v
			end
		end
	end

	Funcs.VerifySword = function(self, SName)
		local Swords = Items.Weapon
		return Swords:FindFirstChild(SName) and Swords[SName].Value > 0
	end

	Funcs.VerifyAccessory = function(self, AName)
		local Accessories = Items.Accessory
		return Accessories:FindFirstChild(AName) and Accessories[AName].Value > 0
	end

	Funcs.GetMaterial = function(self, MName)
		local ItemStorage = Items.ItemStorage
		return ItemStorage:FindFirstChild(MName) and ItemStorage[MName].Value or 0
	end

	Funcs.AbilityUnlocked = function(self, Ablt)
		return Ability:FindFirstChild(Ablt) and Ability[Ablt].Value
	end

	Funcs.CanBuy = function(self, Item)
		if Loaded.ItemsPrice[Item] then
			return Loaded.ItemsPrice[Item]()
		end
		return false
	end

	Funcs.GetData = function(self, Data)
		return PlayerData:FindFirstChild(Data) and PlayerData[Data].Value or 0
	end

	for Npc,Quest in pairs(MQuestSettings) do
		if QuestLocation:FindFirstChild(Npc) then
			table.insert(Loaded.Quests, {
				RaidBoss = Quest.Raid_Boss,
				SpecialQuest = Quest.Special_Quest,
				QuestPos = QuestLocation[Npc].CFrame,
				EnemyPos = EnemyLocation[Quest.Target].CFrame,
				Level = Quest.LevelNeed,
				Enemy = Quest.Target,
				NpcName = Npc
			})
		end
	end

	table.sort(Loaded.Quests, function(a, b) return a.Level > b.Level end)
	for _,v in ipairs(Loaded.Quests) do
		table.insert(Loaded.EnemeiesList, v.Enemy)Loaded.EnemiesQuests[v.Enemy] = v.NpcName
	end
end


local Settings = {
	AutoClick = true,
	AutoHaki = true,
	ToolFarm = "Sword"
}

local function PlayerClick()
	local Char = Player.Character
	if Char then
		if Settings.AutoClick then
			VirtualUser:CaptureController()
			VirtualUser:Button1Down(Vector2.new(1e4, 1e4))
		end
		if Settings.AutoHaki and Char:FindFirstChild("AuraColor_Folder") and Funcs:AbilityUnlocked("Aura") then
			if #Char.AuraColor_Folder:GetChildren() < 1 then
				OtherEvent.MainEvents.Ability:InvokeServer("Aura")
			end
		end
	end
end

local function IsAlive(Char)
	local Hum = Char and Char:FindFirstChild("Humanoid")
	return Hum and Hum.Health > 0
end

local function GetNextEnemie(EnemieName)
	for _,v in ipairs(Monsters:GetChildren()) do
		if (not EnemieName or v.Name == EnemieName) and IsAlive(v) then
			return v
		end
	end
	return false
end

local function GoTo(CFrame, Move)
	local Char = Player.Character
	if IsAlive(Char) then
		return Move and ( Char:MoveTo(CFrame.p) or true ) or Char:SetPrimaryPartCFrame(CFrame)
	end
end

local function EquipWeapon()
	local Backpack, Char = Player:FindFirstChild("Backpack"), Player.Character
	if IsAlive(Char) and Backpack then
		for _,v in ipairs(Backpack:GetChildren()) do
			if v:IsA("Tool") and v.ToolTip:find(Settings.ToolFarm) then
				Char.Humanoid:EquipTool(v)
			end
		end
	end
end

local function BringMobsTo(_Enemie, CFrame, SBring)
	for _,v in ipairs(Monsters:GetChildren()) do
		if (SBring or v.Name == _Enemie) and IsAlive(v) then
			local PP, Hum = v.PrimaryPart, v.Humanoid
			if PP and (PP.Position - CFrame.p).Magnitude < 500 then
				Hum.WalkSpeed = 0
				Hum:ChangeState(14)
				PP.CFrame = CFrame
				PP.CanCollide = false
				PP.Transparency = Settings.ViewHitbox and 0.8 or 1
				PP.Size = Vector3.new(100, 100, 100)
			end
		end
	end
	return pcall(sethiddenproperty, Player, "SimulationRadius", _huge)
end

local function KillMonster(_Enemie, SBring)
	local Enemy = typeof(_Enemie) == "Instance" and _Enemie or GetNextEnemie(_Enemie)
	if IsAlive(Enemy) and Enemy.PrimaryPart then
		GoTo(Enemy.PrimaryPart.CFrame * Settings.FarmCFrame)EquipWeapon()
		if not Enemy:FindFirstChild("Reverse_Mark") then PlayerClick() end
		if Settings.BringMobs then BringMobsTo(_Enemie, Enemy.PrimaryPart.CFrame, SBring) end
		return true
	end
end

local function TakeQuest(QuestName, CFrame, Wait)
	local QuestGiver = Quests_Npc:FindFirstChild(QuestName)
	if QuestGiver and Player:DistanceFromCharacter(QuestGiver.WorldPivot.p) < 5 then
		return fireproximityprompt(QuestGiver.Block.QuestPrompt), _wait(Wait or 0.1)
	end
	GoTo(CFrame or QuestLocation[QuestName].CFrame)
end

local function ClearQuests(Ignore)
	for _,v in ipairs(QuestFolder:GetChildren()) do
		if v.QuestGiver.Value ~= Ignore and v.Target.Value ~= "None" then
			OtherEvent.QuestEvents.Quest:FireServer("Abandon_Quest", { QuestSlot = v.Name })
		end
	end
end

local function GetRaidEnemies()
	for _,v in ipairs(Monsters:GetChildren()) do
		if v:GetAttribute("Raid_Enemy") and IsAlive(v) then
			return v
		end
	end
end

local function GetRaidMap()
	for _,v in ipairs(Raids:GetChildren()) do
		if v.Joiners:FindFirstChild(Player.Name) then
			return v
		end
	end
end

local function VerifyQuest(QName)
	local Quest = Funcs:CheckQuest()
	return Quest and Quest.QuestGiver.Value == QName
end


local NoobLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Noob-With-Z/NoobLib/main/source"))()

local Window = NoobLib:MakeWindow("NoobLib | Meme Sea", "Made By NoobZ", Enum.KeyCode.H, {ShowPing = true, ShowKeybind = true, ShowFPS = true})

local Farm = Window:MakeTab("Auto Farm", 123456789)
local Set = Window:MakeTab("Settings", 123456789)

WeaponList = {}
for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
	if v:IsA("Tool") then
		table.insert(WeaponList ,v.Name)
	end
end

local wdd = Farm:Dropdown("Select Weapon: ", {WeaponList}, function(DropdownValue)
	Settings.ToolFarm = DropdownValue
end)

local Farms = {
	AutoFarm = false,
}

Farm:Toggle("Auto Farm", true, function(Value)
	Farms.AutoFarm = Value
end)

spawn(function()
	while wait(0.1) do
		if Farms.AutoFarm == true then
			EquipWeapon()
			if IsAlive(Player.Character) then
				local Quest, QuestChecker = Funcs:GetCurrentQuest(), Funcs:CheckQuest()
				if Quest then
					if QuestChecker then
						local _QuestName = QuestChecker.QuestGiver.Value
						if _QuestName == Quest.NpcName then
							if KillMonster(Quest.Enemy) then else GoTo(Quest.EnemyPos) end
						else
							if KillMonster(QuestChecker.Target.Value) then else GoTo(QuestLocation[_QuestName].CFrame) end
						end
					else TakeQuest(Quest.NpcName) end
				end
				return true
			end
		end
	end
end)

Farm:Button("Refresh Weapon", function()
	wdd:Clear()
	for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
		wdd:Add(v.Name)
	end
end)

Set:Toggle("Auto Click", true, function(Value)
	if Value == false then
		Settings.AutoClick = false
	else
		Settings.AutoClick = true
	end
end)

Set:Toggle("Auto Haki", true, function(Value)
	if Value == false then
		Settings.AutoHaki = false
	else
		Settings.AutoHaki = true
	end
end)
